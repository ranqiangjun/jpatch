diff --git a/commerce_exchanger.module b/commerce_exchanger.module
index e3003cb..0c2f83d 100644
--- a/commerce_exchanger.module
+++ b/commerce_exchanger.module
@@ -10,5 +10,5 @@
  */
 function commerce_exchanger_cron() {
   // Import exchange rates.
-  \Drupal::service('commerce_exchanger.import')->run();
+  // \Drupal::service('commerce_exchanger.import')->run();
 }
diff --git a/src/AbstractExchangerCalculator.php b/src/AbstractExchangerCalculator.php
index 176115d..56ecf95 100644
--- a/src/AbstractExchangerCalculator.php
+++ b/src/AbstractExchangerCalculator.php
@@ -87,6 +87,12 @@ abstract class AbstractExchangerCalculator implements ExchangerCalculatorInterfa
       throw new ExchangeRatesDataMismatchException('There are no exchange rates set for ' . $price_currency . ' and ' . $target_currency);
     }
 
+    if ($price_currency === 'VND') {
+      \Drupal::logger('debug-before')->info(var_export($rate, TRUE));
+      $rate = sprintf ( "%.12F", $rate);
+      \Drupal::logger('debug-after')->info(var_export($rate, TRUE));
+    }
+
     // Convert amount to target currency.
     $price = $price->convert($target_currency, (string) $rate);
     $price = $this->rounder->round($price);
diff --git a/src/Plugin/Commerce/ExchangerProvider/ExchangerProviderRemoteBase.php b/src/Plugin/Commerce/ExchangerProvider/ExchangerProviderRemoteBase.php
index 34f715b..6fd0a51 100644
--- a/src/Plugin/Commerce/ExchangerProvider/ExchangerProviderRemoteBase.php
+++ b/src/Plugin/Commerce/ExchangerProvider/ExchangerProviderRemoteBase.php
@@ -77,6 +77,7 @@ abstract class ExchangerProviderRemoteBase extends ExchangerProviderBase impleme
     }
     catch (GuzzleException $e) {
       $this->logger->error($e->getMessage());
+      \Drupal::state()->set('commerce_exchanger.' . $this->getPluginId() . ' .has_error', TRUE);
     }
 
     return $data;
@@ -254,14 +255,28 @@ abstract class ExchangerProviderRemoteBase extends ExchangerProviderBase impleme
    * {@inheritdoc}
    */
   public function import() {
+    $provider_id = $this->getPluginId();
+    // Reset state to FALSE before importing.
+    \Drupal::state()->set('commerce_exchanger.' . $provider_id . ' .has_error', FALSE);
     $exchange_rates = $this->buildExchangeRates();
-
+    $has_error = \Drupal::state()->get('commerce_exchanger.' . $provider_id . ' .has_error', FALSE);
+    if ($has_error) {
+      $this->logger->notice("Failed to import exchange rates with $provider_id.");
+      return;
+    }
     // Write new data.
-    if (!empty($exchange_rates)) {
+    if (!empty($exchange_rates)
+      && isset($exchange_rates['CNY']['GBP']['value'])
+      && is_float($exchange_rates['CNY']['GBP']['value'])
+      && $exchange_rates['CNY']['GBP']['value'] !== 0.0
+    ) {
       $file = $this->configFactory->getEditable($this->getConfigName());
       $file->setData(['rates' => $exchange_rates]);
       $file->save();
     }
+    else {
+      $this->logger->notice('Wrong exchange rates data: '  . var_export($exchange_rates, TRUE));
+    }
   }
 
 }
diff --git a/src/Plugin/Commerce/ExchangerProvider/FixerExchanger.php b/src/Plugin/Commerce/ExchangerProvider/FixerExchanger.php
index ed487f1..2e09ce2 100644
--- a/src/Plugin/Commerce/ExchangerProvider/FixerExchanger.php
+++ b/src/Plugin/Commerce/ExchangerProvider/FixerExchanger.php
@@ -22,7 +22,7 @@ class FixerExchanger extends ExchangerProviderRemoteBase {
    * {@inheritdoc}
    */
   public function apiUrl() {
-    return 'http://data.fixer.io/api/latest';
+    return 'https://api.apilayer.com/fixer/latest';
   }
 
   /**
@@ -31,8 +31,12 @@ class FixerExchanger extends ExchangerProviderRemoteBase {
   public function getRemoteData($base_currency = NULL) {
     $data = NULL;
 
+    if (!in_array($base_currency, ['CNY', 'GBP', 'VND'])) {
+      return NULL;
+    }
+
     $options = [
-      'query' => ['access_key' => $this->getApiKey()],
+      'headers' => ['apikey' => $this->getApiKey()],
     ];
 
     // Add base currency if we use enterprise model.
@@ -45,6 +49,8 @@ class FixerExchanger extends ExchangerProviderRemoteBase {
     if ($request) {
       $json = Json::decode($request);
 
+      $this->logger->info(var_export($json, TRUE));
+
       if (!empty($json['success'])) {
         // Leave base currency. In some cases we don't know base currency.
         // Fixer.io on free plan uses your address for base currency, and in
